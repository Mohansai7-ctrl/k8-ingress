#Make sure create a certificate and provide certificate arn in Ingress annotation alb.ingress.kubernetes.io/certificate-arn:
#before creating or executing make sure to install policies and drivers of ingress, OICD OAUTH2 and provide permissions via readme.



# #writing a simple deployment and service for it and finally ingress resource

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: app1
#   labels:
#     name: app1
#     tier: frontend

# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       name: app1
#       tier: frontend
#   template:
#     metadata:
#       labels:
#         name: app1
#         tier: frontend
#     spec:
#       containers:
#       - name: app1
#         image: mohansai7/app1:v1

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: app1
# spec:
#   selector:
#     name: app1
#     tier: frontend
#   ports:
#   - name: nginx-svc-port
#     protocol: TCP
#     port: 80
#     targetPort: 80

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#     name: app1
#     annotations:
#       kubernetes.io/ingress.class: alb
#       alb.ingress.kubernetes.io/scheme: internet-facing
#       alb.ingress.kubernetes.io/target-type: ip
#       alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:022499022353:certificate/03d12fc8-f497-407d-8ecd-f067e0f61136
#       alb.ingress.kubernetes.io/listen-ports: '[ {"HTTPS", 443}]'
#       alb.ingress.kubernetes.io/tags: Environment=dev,Team=test
#       alb.ingress.kubernetes.io/group.name: expense  #This grp indicates that created alb will be in this grp expense, and as this is the same group for app2 also, now this ingress lb routes traffic to ingress to ingress rules -> service => pods(app1 and app2 pods)
# spec:
#     rules:
#     - host: "app1.mohansai.online"
#       http:
#         paths:
#         - pathType: Prefix
#           path: "/"
#           backend:
#             service:
#               name: app1
#               port:
#                 number: 80

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  labels: # these are replicaset labels
    name: app1
    tier: frontend
spec:
  # modify replicas according to your case
  replicas: 1
  selector:
    # these are used to select the pod to create replicas
    matchLabels:
      name: app1
      tier: frontend
  # this is pod definition
  template:
    metadata:
      # these labels belongs to pod
      labels:
        name: app1
        tier: frontend
    spec:
      containers:
      - name: app1
        image: mohansai7/app1:v1

---
kind: Service
apiVersion: v1
metadata:
  name: app1
spec:
  selector:
    name: app1
    tier: frontend
  ports:
  - name: nginx-svc-port
    protocol: TCP
    port: 80 # service port
    targetPort: 80 # container port

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:   #give double tab for content
    name: app1
    annotations:
      #kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:022499022353:certificate/7f8a5b74-56c3-4977-8c2b-08fc3644eea5
      alb.ingress.kubernetes.io/listen-ports: '[ {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/tags: Environment=dev,Team=test
      alb.ingress.kubernetes.io/group.name: expense
spec:   #give double tab for content
    ingressClassName: alb
    rules:
    - host: "app1.mohansai.online"
      http:
        paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: app1
              port:
                number: 80

